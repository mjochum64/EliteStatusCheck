[tool:pytest]
# Pytest configuration for EliteStatusCheck Inara API testing

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 6.0

# Add options
addopts = 
    -ra
    --strict-markers
    --strict-config
    --disable-warnings
    --tb=short
    --maxfail=10
    --durations=10

# Markers for test categorization
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests requiring external services
    performance: marks tests as performance/benchmark tests  
    unit: marks tests as unit tests (fast, isolated)
    api: marks tests that test API endpoints
    security: marks tests for security validation
    validation: marks tests for data validation
    cache: marks tests related to caching functionality
    mock: marks tests using mock data
    live: marks tests requiring live API access
    auth: marks tests for authentication/authorization
    error: marks tests for error handling scenarios

# Test output
console_output_style = progress
junit_family = xunit2

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage (if pytest-cov is installed)
# Enable with: pytest --cov=elite_status
[coverage:run]
source = elite_status
omit = 
    */tests/*
    */venv/*
    */env/*
    */.venv/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:

# Filter warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Add specific warnings to ignore here

# Asyncio mode (for async tests)
asyncio_mode = auto

# Custom test order (if pytest-order is installed)
# Run unit tests first, then integration, then performance
# This is useful for failing fast on basic issues